#!/usr/bin/env stack
{- stack
  --resolver lts-9.0
  --install-ghc
  runghc
  -- -Wall -Werror
-}
-- vim: ft=haskell
module Main (main) where

import Control.Monad (forM_, when)
import Data.List (isInfixOf, stripPrefix)
import Data.Maybe (fromMaybe)
import System.Environment (getArgs, getEnv)
import System.FilePath ((</>), dropExtension)
import System.Process (readProcess)

main :: IO ()
main = do
    args <- getArgs
    store <- (</> ".password-store/") <$> getEnv "HOME"
    names <- map (dropExtension . dropPrefix store) . lines
        <$> readProcess "find" [store, "-type", "f", "-name", "*.gpg"] ""

    forM_ names $ \name ->
        when (any (`isInfixOf` name) args) $ do
            putStrLn $ "pass rm \"" ++ name ++ "\""
            --callCommand "pass", ["rm", name]

dropPrefix :: Eq a => [a] -> [a] -> [a]
dropPrefix p x = fromMaybe x $ stripPrefix p x
